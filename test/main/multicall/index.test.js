import ethProvider from 'eth-provider'
import { BigNumber as EthersBigNumber } from '@ethersproject/bignumber'

import multicall from '../../../main/multicall'

jest.mock('eth-provider', () => () => ({ request: jest.fn() }))

let eth
beforeEach(() => {
  eth = ethProvider()
  eth.request = jest.fn()
})

it('encodes aggregated correctly', async () => {
  eth.request.mockImplementationOnce(async (payload) => {
    expect(payload.method).toBe('eth_call')
    expect(payload.params[0].to).toBe('0x5ba1e12693dc8f9c48aad8770482f4739beed696')
    expect(payload.params[0].data).toBe('0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000bcca60bb61934080951369a648fb03df4f96263c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002470a082310000000000000000000000001ad91ee08f21be3de0ba2ba6918e714da6b458360000000000000000000000000000000000000000000000000000000000000000000000000000000070e36f6bf80a52b3b46b3af8e106cc0ed743e8e40000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002470a082310000000000000000000000001ad91ee08f21be3de0ba2ba6918e714da6b4583600000000000000000000000000000000000000000000000000000000')

    return '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000017c7aa0a300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000feca4525'
  })

  const caller = multicall(4, eth)

  const calls = [
    {
      target: '0xBcca60bB61934080951369a648Fb03DF4F96263C',
      call: ['function balanceOf(address address) returns (uint256 value)', '0x1aD91ee08f21bE3dE0BA2ba6918E714dA6B45836'],
      returns: [
        bn => bn.toHexString()
      ]
    },
    {
      target: '0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4',
      call: ['function balanceOf(address address) returns (uint256 value)', '0x1aD91ee08f21bE3dE0BA2ba6918E714dA6B45836'],
      returns: [
        bn => bn.toHexString()
      ]
    }
  ]

  const result = await caller.batchCall(calls)

  expect(result).toEqual([
    { success: true, returnValues: ['0x017c7aa0a3'] },
    { success: true, returnValues: ['0xfeca4525'] }
  ])
})

it('handles an error when using tryAggregate', async () => {
  eth.request.mockImplementationOnce(async (payload) => {
    expect(payload.method).toBe('eth_call')
    expect(payload.params[0].to).toBe('0x5ba1e12693dc8f9c48aad8770482f4739beed696')
    expect(payload.params[0].data).toBe('0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000bcca60bb61934080951369a648fb03df4f96263c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002470a082310000000000000000000000001ad91ee08f21be3de0ba2ba6918e714da6b4583600000000000000000000000000000000000000000000000000000000000000000000000000000000089a502032166e07ae83eb434c16790ca2fa46610000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002470a082310000000000000000000000001ad91ee08f21be3de0ba2ba6918e714da6b4583600000000000000000000000000000000000000000000000000000000')

    return '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000017c7aa4bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000'
  })

  const caller = multicall(1, eth)

  const calls = [
    {
      target: '0xBcca60bB61934080951369a648Fb03DF4F96263C',
      call: ['function balanceOf(address address) returns (uint256 value)', '0x1aD91ee08f21bE3dE0BA2ba6918E714dA6B45836'],
      returns: [
        bn => bn.toHexString()
      ]
    },
    {
      target: '0x089a502032166e07ae83eb434c16790ca2fa4661',
      call: ['function balanceOf(address address) returns (uint256 value)', '0x1aD91ee08f21bE3dE0BA2ba6918E714dA6B45836'],
      returns: [
        bn => bn.toHexString()
      ]
    }
  ]

  const result = await caller.batchCall(calls)

  expect(result).toEqual([
    { success: true, returnValues: ['0x017c7aa4bb'] },
    { success: false, returnValues: [] }
  ])
})